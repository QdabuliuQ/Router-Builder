#! /usr/bin/env node
global.navigator={userAgent:"node.js"};var fs=require("node:fs"),path=require("node:path"),prettier=require("prettier"),util=require("util");function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var styles={reset:"[0m",bright:"[1m",grey:"[2m",italic:"[3m",underline:"[4m",reverse:"[7m",hidden:"[8m",black:"[30m",red:"[31m",green:"[32m",yellow:"[33m",blue:"[34m",magenta:"[35m",cyan:"[36m",white:"[37m",blackBG:"[40m",redBG:"[41m",greenBG:"[42m",yellowBG:"[43m",blueBG:"[44m",magentaBG:"[45m",cyanBG:"[46m",whiteBG:"[47m"};function colors(e,t){var n="";return"string"==typeof e?n=styles[e]:e.forEach((e=>{n+=styles[e]})),n+t+styles.reset}var colorsConsole=colors,colors$1=getDefaultExportFromCjs(colorsConsole);const rootPath=process.cwd();function getFilesInfo(e){let t=fs.readdirSync(e);const n={};return t.forEach((function(t){const o=path.join(e,t),r=fs.statSync(o);n[t]={type:r.isFile()?"file":"dict",path:`\\${t}`,name:t,names:[...e.replace(`${rootPath}\\src\\views`,"").split("\\").filter(Boolean),t],fullPath:o}})),n}function conveyFunctionToString(e){for(const t in e)Object.hasOwnProperty.call(e,t)&&("function"==typeof e[t]?e[t]=`$$$${e[t].toString()}$$$`:e[t]&&"object"==typeof e[t]&&conveyFunctionToString(e[t]));return e}function importCode(e,t,n,o){return o?`$$$() => import( /* webpackChunkName: '${o}' */ '${n.importPrefix}/${e.length?e.join("/")+"/":""}${"<dictName>"===n.fileName?`${t}.vue`:"index"}.vue')$$$`:`$$$() => import('${n.importPrefix}/${e.length?e.join("/")+"/":""}${"<dictName>"===n.fileName?`${t}.vue`:"index"}.vue')$$$`}function getRouterConfig(content){const matches=[];let match;const reg=/<router>([\s\S]*?)<\/router>/g;for(;null!==(match=reg.exec(content));)matches.push(match[1]);if(matches.length){const params=matches.map((match=>eval(`(function(){return {${match}}})()`)));return params}return null}async function generateRouterConfig(e,t,n,o){let r=null;if(e){r=[];for(const i of e)conveyFunctionToString(i),r.push({...t,...i,component:importCode(n.names,n.name,o,i.webpackChunkName)})}return r}async function generateRouterFile(e,t,n){console.log(t);const o=n.output.split("/").filter((e=>Boolean(e))),r=o.pop();let i=rootPath;for(const e of o){i+=`//${e}`;try{await fs.promises.access(i)}catch(e){await fs.promises.mkdir(i)}}const s=await prettier.format(await generateRouterTemplate(e,t),{parser:"babel"});fs.promises.writeFile(`${i}//${r}`,s)}async function generateRouterTemplate(e,t){const n=JSON.parse(await fs.promises.readFile(`${rootPath}\\package.json`,"utf-8"));let o="";const r=util.inspect(t,{depth:null}),i=r.substring(1,r.length-2);return console.log(i),n.dependencies&&(o="2"===n.dependencies.vue.replace("^","").split(".")[0]?`\nimport Vue from "vue";\nimport Router from "vue-router";\nVue.use(Router);\nexport default new Router({\n  routes: ${e},\n})\n        `:`\nimport { createRouter } from 'vue-router'\nconst router = createRouter({\n\troutes: ${e},\n})\n\nexport default router\n        `),o}function isRegExp(e){return"[object RegExp]"===Object.prototype.toString.call(e)}async function readFileContent(e,t){try{const n=await fs.promises.readFile(`${e.fullPath}\\${"<dictName>"===t.fileName?e.name:"index"}.vue`,"utf-8");return getRouterConfig(n)}catch(e){return null}}async function readDictContent(e,t){const n=getFilesInfo(e.fullPath);if("{}"===JSON.stringify(n))return null;let o=null;if(n.hasOwnProperty("<dictName>"===t.fileName?`${e.name}.vue`:"index.vue")){const n={path:e.names.length?`/${e.names.join("/")}`:`/${e.name}`},r=await readFileContent(e,t),i=await generateRouterConfig(r,n,e,t);i&&(o=[...i])}e:for(const r in n){if(n["<dictName>"===t.fileName?`${e.name}.vue`:"index.vue"]===r)continue;if("file"===n[r].type)continue;for(const e of t.ignoreFolder)if("string"==typeof e||isRegExp(e)){if("string"==typeof e&&e===n[r].name)continue e;if(isRegExp(e)&&e.test(n[r].name))continue e}const i=await readDictContent(n[r],t);if(o)for(const e of o)e.children||(e.children=[]),i&&e.children.push(...i);else o=i}return o}let customConfig=null;try{customConfig=require(`${process.cwd()}\\router.config.js`)}catch(e){console.log(colors$1(["white","redBG"],"the router.config.js is no exist"))}!function(){if(!customConfig)return;const e={entry:"/src/views",output:"/src/router/index.js",importPrefix:"@/src/views",ignoreFolder:[],fileName:"index",...customConfig},t=process.cwd(),n=e.entry.split("/").filter(Boolean).join("\\");fs.existsSync(`${t}\\${n}`)?async function(){const o=getFilesInfo(`${t}\\${n}`),r=[];for(const t in o)if(o.hasOwnProperty(t)&&"dict"===o[t].type){const n=await readDictContent(o[t],e);n&&r.push(...n)}generateRouterFile(JSON.stringify(r).replace(/"\$\$\$|\$\$\$"|\\r|\\n/g,""),customConfig.option,e),console.log(colors$1(["white","greenBG"],"router file generation successful!"))}():console.log(colors$1(["white","redBG"],"the entry folder is no exist"))}();
